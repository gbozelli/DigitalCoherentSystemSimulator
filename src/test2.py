from QAM_transmitter import QAM_transmitter
from QAM_receiver import QAM_receiver
from QAM_receiver import QAM_receiver_DP
from QAM_receiver import DPQAM_receiver
from single_frequency_laser import single_frequency_laser
from MZM import MZM
from HybridNetwork import HybridNetwork
from photodiode import photodiode
from fiber import fiber
from EDFA import EDFA
from constellation_analysis import constellation_analysis
from spectrum_analysis import spectrum_analysis
from QAM_transmitter import DPQAM_transmitter
from optical_filter import optical_filter

# -*- coding: utf-8 -*-
"""6_DigitalCoherentSystem_DP_fiber_solved.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/120eO2wUnIRLB09moO0Dr9X54yWaz6gin

# 6. Simulation of a dual-polarization digital coherent system

In this notebook, you will simulate a complete communication system employing QAM modulation formats with dual polarization.

In particular you will learn some important concepts, including:
- QAM modulation and demodulation
- Time synchronization through correlation
- Phase alignment
- Filtering

The simulation includes lasers, modulators, and photodetectors.

## 6.0 Reset the variables and configure the environment:
"""

# Commented out IPython magic to ensure Python compatibility.
#%reset
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib qt

plt.close('all')

# General Parameters
M = 16                 # Number of points in the constellation
SpS = 16               # Number of samples per symbol
RollOff = 0.2          # Roll-off factor
BaudRate = 14e9        # Baudrate in Sps
Tsym = 1/BaudRate      # Symbol peiod in s
ts = Tsym/SpS          # Sampling peiod
N_zeros_init = 100     # Number of initial zeros
N_sync = 256           # Number of synchronization symbols
N_inf = 4*4096           # Number of information symbols (payload)
N_zeros_final = 100    # Number of final zeros
sync_seed_X=0          # Seed for the X polarization
sync_seed_Y=123        # Seed for the Y polarization

# Configuration of the optical blocks

Delta_nu_TX = 100e3    # Transmitter laser linewidth in Hz
P_laser_RX = 0.01      # Transmitter laser power in W
Delta_nu_RX = 100e3    # Transmitter laser linewidth in Hz
Freq_offset_TX = 0+75e9     # Offset frequency of the transmitter laser in Hz
Freq_offset_RX = 55e6+75e9  # Offset frequency of the transmitter laser in Hz
ind_mod = 0.1          # Modulation index

P_laser_TX = 0.01      # Transmitter laser power in W
L = 100e3             # Fiber length in [m]
alpha_dB = 0.2e-3     # Fiber attenuation in dB/m
D = 16e-6             # Dispersion in [s/m^2]
n2= 2.6e-20         # Nonlinear coeffient in m^2/W
DeltaL = 1e3          # Fiber segment in m
lambda0 = 1550e-9     # Nominal wavelength in m
Aeff = 80e-12         # Effective modal area in m^2
SoP_rotation = True   # Activate SoP rotation

G_edfa_dB = 26
NF_dB = 5
t, E_TX, E_carrier, s_tx, s_b = DPQAM_transmitter(P_laser_TX,M = M, SpS = SpS, RollOff = RollOff, \
                ts = ts, sync_seed_X=0,sync_seed_Y=123,N_sync = 256,N_inf = N_inf,N_zeros_init=N_zeros_init,\
                N_zeros_final=N_zeros_final,ind_mod = ind_mod,Delta_nu=Delta_nu_TX,Freq_offset=Freq_offset_TX,\
                plot_flag = False)
# Visualization of the spectrum
spectrum_analysis(E_TX[0,:],t)

# Channel
E_amp = EDFA(E_TX,t,G_edfa_dB,NF_dB,lambda0=1550e-9)
E_RX = fiber(E_amp,t,L,DeltaL,D,lambda0,alpha_dB,n2,Aeff,SoP_rotation) # Output field

# Optical receiver
BER = DPQAM_receiver(E_RX,E_TX,t,RollOff,ts,M,SpS,N_inf,s_b, P_laser = P_laser_RX, Delta_nu = Delta_nu_RX, N_sync = N_sync, sync_seed_X=0,sync_seed_Y=123,Freq_offset = Freq_offset_RX, \
                     plot_flag = False, shot_noise = True, thermal_noise = True,L=L,D=D)
print('The BER of the X component is:',BER[0])
print('The BER of the Y component is:',BER[1])



"""Ex. 1: Modify the code in order to set the launched optical power (consider both polarizations)."""

plt.close('all')

# General Parameters
M = 16                 # Number of points in the constellation
SpS = 16               # Number of samples per symbol
RollOff = 0.2          # Roll-off factor
BaudRate = 4*14e9        # Baudrate in Sps
Tsym = 1/BaudRate      # Symbol peiod in s
ts = Tsym/SpS          # Sampling peiod
N_zeros_init = 100     # Number of initial zeros
N_sync = 256           # Number of synchronization symbols
N_inf = 4*4096           # Number of information symbols (payload)
N_zeros_final = 100    # Number of final zeros
sync_seed_X=0          # Seed for the X polarization
sync_seed_Y=123        # Seed for the Y polarization

# Configuration of the optical blocks
P_laser_TX = 0.01      # Transmitter laser power in W
Delta_nu_TX = 100e3    # Transmitter laser linewidth in Hz
P_laser_RX = 0.01      # Transmitter laser power in W
Delta_nu_RX = 100e3    # Transmitter laser linewidth in Hz
Freq_offset_TX = 75e9     # Offset frequency of the transmitter laser in Hz
Freq_offset_RX = 55e6+75e9  # Offset frequency of the transmitter laser in Hz
ind_mod = 0.1          # Modulation index

L = 120e3             # Fiber length in [m]
alpha_dB = 0.2e-3     # Fiber attenuation in dB/m
D = 16e-6             # Dispersion in [s/m^2]
n2= 2.6e-20           # Nonlinear coeffient in m^2/W
DeltaL = 1e3          # Fiber segment in m
lambda0 = 1550e-9     # Nominal wavelength in m
Aeff = 80e-12         # Effective modal area in m^2
SoP_rotation = True   # Activate SoP rotation
#G_edfa_dB = 24
NF_dB = 5
P_LOP = 0.002          # Launch optical power in W

t, E_TX, E_carrier, s_tx, s_b = DPQAM_transmitter(P_laser_TX,M = M, SpS = SpS, RollOff = RollOff, \
                ts = ts, sync_seed_X=0,sync_seed_Y=123,N_sync = 256,N_inf = N_inf,N_zeros_init=N_zeros_init,\
                N_zeros_final=N_zeros_final,ind_mod = ind_mod,Delta_nu=Delta_nu_TX,Freq_offset=Freq_offset_TX,\
                plot_flag = True)

# Visualization of the spectrum
spectrum_analysis(E_TX[0,:],t)

P_aux = np.mean((np.abs(E_TX[0,:]))**2)+np.mean((np.abs(E_TX[1,:]))**2)
#G_edfa = P_LOP/P_aux
G_edfa_dB = 10*np.log10(P_LOP/P_aux)
print('The required gain is:',G_edfa_dB,'dB')
E_LOP = EDFA(E_TX,t,G_edfa_dB,NF_dB,lambda0=1550e-9)
P_aux_1 = np.mean((np.abs(E_LOP[0,:]))**2)+np.mean((np.abs(E_LOP[1,:]))**2)
#print(P_aux_1)

# Channel
E_RX = fiber(E_LOP,t,L,DeltaL,D,lambda0,alpha_dB,n2,Aeff,SoP_rotation) # Output field

# Optical receiver
BER = DPQAM_receiver(E_RX,E_TX,t,RollOff,ts,M,SpS,N_inf,s_b, P_laser = P_laser_RX, Delta_nu = Delta_nu_RX, N_sync = N_sync, sync_seed_X=0,sync_seed_Y=123,Freq_offset = Freq_offset_RX, \
                     plot_flag = True, shot_noise = True, thermal_noise = True,L=L,D=D)
print('The BER of the X component is:',BER[0])
print('The BER of the Y component is:',BER[1])



"""Ex. 2: Make a sweep on the launched optical power and find the optimum power level. Explain the behavior."""

plt.close('all')

# General Parameters
M = 16                 # Number of points in the constellation
SpS = 16               # Number of samples per symbol
RollOff = 0.2          # Roll-off factor
BaudRate = 4*14e9        # Baudrate in Sps
Tsym = 1/BaudRate      # Symbol period in s
ts = Tsym/SpS          # Sampling peiod
N_zeros_init = 100     # Number of initial zeros
N_sync = 256           # Number of synchronization symbols
N_inf = 4*4096         # Number of information symbols (payload)
N_zeros_final = 100    # Number of final zeros
sync_seed_X=0          # Seed for the X polarization
sync_seed_Y=123        # Seed for the Y polarization

# Configuration of the optical blocks
P_laser_TX = 0.01      # Transmitter laser power in W
Delta_nu_TX = 100e3    # Transmitter laser linewidth in Hz
P_laser_RX = 0.01      # Transmitter laser power in W
Delta_nu_RX = 100e3    # Transmitter laser linewidth in Hz
Freq_offset_TX = 0     # Offset frequency of the transmitter laser in Hz
Freq_offset_RX = 55e6  # Offset frequency of the transmitter laser in Hz
ind_mod = 0.1          # Modulation index

L = 100e3              # Fiber length in [m]
alpha_dB = 0.2e-3      # Fiber attenuation in dB/m
D = 16e-6              # Dispersion in [s/m^2]
n2= 2.6e-20            # Nonlinear coeffient in m^2/W
DeltaL = 1e3           # Fiber segment in m
lambda0 = 1550e-9      # Nominal wavelength in m
Aeff = 80e-12          # Effective modal area in m^2
SoP_rotation = True    # Activate SoP rotation
#G_edfa_dB = 24
NF_dB = 5

#P_LOP_array = np.arange(0.001,0.01,0.00025)     # Launch optical power in W

# 1. Cria o array em dBm
P_LOP_array_dBm = np.arange(2, 13, 1)
# 2. Converte o array de dBm para Watts
P_LOP_array = 0.001 * 10**(P_LOP_array_dBm / 10)

BER_X_array = np.zeros(np.shape(P_LOP_array))
BER_Y_array = np.zeros(np.shape(P_LOP_array))
for counter, P_LOP in enumerate(P_LOP_array):
    print('Processing',counter,'of',len(P_LOP_array))
    plt.close('all')
    t, E_TX, E_carrier, s_tx, s_b = DPQAM_transmitter(P_laser_TX,M = M, SpS = SpS, RollOff = RollOff, \
                ts = ts, sync_seed_X=0,sync_seed_Y=123,N_sync = 256,N_inf = N_inf,N_zeros_init=N_zeros_init,\
                N_zeros_final=N_zeros_final,ind_mod = ind_mod,Delta_nu=Delta_nu_TX,Freq_offset=Freq_offset_TX,\
                plot_flag = True)
    # Visualization of the spectrum
    #spectrum_analysis(E_TX[0,:],t)
    P_aux = np.mean((np.abs(E_TX[0,:]))**2)+np.mean((np.abs(E_TX[0,:]))**2)
    G_edfa_dB = 10*np.log10(P_LOP/P_aux)
    print('The required gain is:',G_edfa_dB,'dB')
    E_LOP = EDFA(E_TX,t,G_edfa_dB,NF_dB,lambda0=1550e-9)

    # Channel
    E_RX = fiber(E_LOP,t,L,DeltaL,D,lambda0,alpha_dB,n2,Aeff,SoP_rotation) # Output field

    # Optical receiver
    BER = DPQAM_receiver(E_RX,E_TX,t,RollOff,ts,M,SpS,N_inf,s_b, P_laser = P_laser_RX, Delta_nu = Delta_nu_RX, N_sync = N_sync, sync_seed_X=0,sync_seed_Y=123,Freq_offset = Freq_offset_RX, \
                     plot_flag = False, shot_noise = True, thermal_noise = True,L=L,D=D)
    print('\tThe BER of the X component is:',BER[0])
    print('\tThe BER of the Y component is:',BER[1])
    BER_X_array[counter] = BER[0]
    BER_Y_array[counter] = BER[1]
plt.figure()
plt.plot(P_LOP_array_dBm,BER_X_array)
plt.yscale('log')
plt.show()
